insertUser = INSERT INTO CCJ_USER (USERNAME, PASSWORD, PASSWORD_SALT) values(?, ?, ?)
initRatings = INSERT INTO CCJ_RATING_GENERAL (USERID, PRODUCTID, RATING) SELECT (SELECT MAX (USERID) FROM CCJ_USER), PRODUCTID, 0 FROM CCJ_PRODUCTS
getUserPassword = SELECT PASSWORD from CCJ_USER WHERE USERNAME = ?
getUserSalt = SELECT PASSWORD_SALT from CCJ_USER WHERE USERNAME = ?
getUserID = SELECT USERID FROM CCJ_USER WHERE USERNAME = ?
getRatingList = SELECT PROD.PRODUCTID, PRODUCTNAME, RATE.RATING, DESCRIPTION, PRODUCTTYPE FROM CCJ_PRODUCTS PROD, CCJ_RATING_GENERAL RATE WHERE RATE.PRODUCTID = PROD.PRODUCTID AND USERID = ? AND ora_hash (PROD.PRODUCTID, (SELECT to_char(sysdate, 'ss') FROM dual)) < ?
updateRatings = UPDATE CCJ_RATING_GENERAL SET RATING = ? WHERE USERID = ? AND PRODUCTID = ?
getRatingCount = SELECT COUNT (*) FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING <> 0
getSimilarUsersOld = select * from (select zaehler.userid, round(zaehler.zaehler / nenner.nenner,2) aehnlichkeit from (select userid, sum (xxx) zaehler from (select otheruser.userid, otheruser.produktid, activuser.bewertung_pears * otheruser.bewertung_pears xxx from (select * from ZZZ_NORMPEARS where userid = ?) activuser,(select * from ZZZ_NORMPEARS where userid != ?) otheruser where activuser.produktid = otheruser.produktid) group by userid) zaehler, (select b.userid, a.quadrat * b.quadrat nenner from (select userid, sqrt( sum( POWER (bewertung_pears, 2) ) ) quadrat from (select * from ZZZ_NORMPEARS where userid = ? ) group by userid) a, (select userid, sqrt( sum( POWER (bewertung_pears, 2) ) ) quadrat from (select * from ZZZ_NORMPEARS where userid != ?) group by userid ) b) nenner where nenner.userid = zaehler.userid and nenner <> 0) where aehnlichkeit > ? 
getProductRecommendations = WITH PRODUCT_AVERAGE_GT AS (SELECT * FROM (SELECT avg(RATING) AvgRating, PRODUCTID FROM (SELECT * FROM CCJ_RATING_GENERAL WHERE USERID in (?) AND NOT PRODUCTID in (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING <> 0)) GROUP BY PRODUCTID) where AvgRating > ?) SELECT * FROM (SELECT PRODUCTID, PRODUCTNAME, dense_rank () over (order by AvgRating desc) rank, round (AvgRating, 2) Rating FROM ( SELECT avgs.PRODUCTID, prods.PRODUCTNAME, AvgRating FROM PRODUCT_AVERAGE_GT avgs, CCJ_PRODUCTS prods where avgs.PRODUCTID = prods.PRODUCTID)) WHERE rank <= ? ORDER BY rank ASC
getPopularProducts = WITH PROD_AVERAGE_RATINGS AS (SELECT PRODUCTID, AVG(RATING) rateAvg FROM CCJ_RATING_GENERAL WHERE RATING > 0 GROUP BY PRODUCTID) SELECT PRODUCTNAME, DESCRIPTION FROM CCJ_PRODUCTS WHERE PRODUCTID IN (SELECT PRODUCTID FROM(SELECT PRODUCTID, rateAvg, RANK() OVER (ORDER BY rateAvg DESC) productRank FROM PROD_AVERAGE_RATINGS))
getSimilarUsers = WITH COMMON_RATINGS AS (SELECT r1.USERID AS user1, r2.USERID AS user2, r1.RATING AS rating1, r2.RATING AS rating2 FROM CCJ_RATING_GENERAL r1 JOIN CCJ_RATING_GENERAL r2 ON r1.PRODUCTID = r2.PRODUCTID AND r1.USERID != r2.USERID WHERE r1.USERID = ? AND r1.RATING != 0 AND r2.RATING != 0) SELECT user2 as SIMILAR_USERS, ROUND ( (COUNT(*) * SUM(rating1 * rating2) - SUM(rating1) * SUM(rating2)) / (SQRT(COUNT(*) * SUM(rating1 * rating1) - SUM(rating1) * SUM(rating1)) * SQRT(COUNT(*) * SUM(rating2 * rating2) - SUM(rating2) * SUM(rating2))), 3) AS PEARSON FROM COMMON_RATINGS GROUP BY user2 HAVING COUNT(*) > 5 ORDER BY PEARSON DESC FETCH FIRST 10 ROWS ONLY