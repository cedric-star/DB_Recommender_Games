insertUser = INSERT INTO CCJ_USER (USERNAME, PASSWORD, PASSWORD_SALT) values(?, ?, ?)
initRatings = INSERT INTO CCJ_RATING_GENERAL (USERID, PRODUCTID, RATING) SELECT (SELECT MAX (USERID) FROM CCJ_USER), PRODUCTID, 0 FROM CCJ_PRODUCTS
initRatingsNewProducts = INSERT INTO CCJ_RATING_GENERAL (USERID, PRODUCTID, RATING) SELECT (SELECT USERID FROM CCJ_USER WHERE USERID = ?), PRODUCTID, 0 FROM CCJ_PRODUCTS WHERE PRODUCTID NOT IN (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ?)
getUserPassword = SELECT PASSWORD from CCJ_USER WHERE USERNAME = ?
getUserSalt = SELECT PASSWORD_SALT from CCJ_USER WHERE USERNAME = ?
getUserID = SELECT USERID FROM CCJ_USER WHERE USERNAME = ?
getRatingList = SELECT PROD.PRODUCTID, PRODUCTNAME, RATE.RATING, DESCRIPTION, PRODUCTTYPE FROM CCJ_PRODUCTS PROD, CCJ_RATING_GENERAL RATE WHERE RATE.PRODUCTID = PROD.PRODUCTID AND USERID = ? AND ora_hash (PROD.PRODUCTID, (SELECT to_char(sysdate, 'ss') FROM dual)) < ?
updateRatings = UPDATE CCJ_RATING_GENERAL SET RATING = ? WHERE USERID = ? AND PRODUCTID = ?
getRatingCount = SELECT COUNT (*) FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING <> 0
getProductRecommendations = WITH PRODUCT_AVERAGE_GT AS (SELECT * FROM (SELECT avg(RATING) AvgRating, PRODUCTID FROM (SELECT * FROM CCJ_RATING_GENERAL WHERE USERID in (?) AND NOT PRODUCTID in (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING <> 0)) GROUP BY PRODUCTID) where AvgRating > ?) SELECT * FROM (SELECT PRODUCTID, PRODUCTNAME, dense_rank () over (order by AvgRating desc) rank, round (AvgRating, 2) Rating FROM ( SELECT avgs.PRODUCTID, prods.PRODUCTNAME, AvgRating FROM PRODUCT_AVERAGE_GT avgs, CCJ_PRODUCTS prods where avgs.PRODUCTID = prods.PRODUCTID)) WHERE rank <= ? ORDER BY rank ASC
getPopularProducts = WITH PROD_AVERAGE_RATINGS AS (SELECT PRODUCTID, AVG(RATING) rateAvg FROM CCJ_RATING_GENERAL WHERE RATING > 0 GROUP BY PRODUCTID) SELECT PRODUCTNAME, DESCRIPTION FROM CCJ_PRODUCTS WHERE PRODUCTID IN (SELECT PRODUCTID FROM(SELECT PRODUCTID, rateAvg, RANK() OVER (ORDER BY rateAvg DESC) productRank FROM PROD_AVERAGE_RATINGS))
getSimilarUsers = WITH COMMON_RATINGS AS (SELECT r1.USERID AS user1, r2.USERID AS user2, r1.RATING AS rating1, r2.RATING AS rating2 FROM CCJ_RATING_GENERAL r1 JOIN CCJ_RATING_GENERAL r2 ON r1.PRODUCTID = r2.PRODUCTID AND r1.USERID != r2.USERID WHERE r1.USERID = ? AND r1.RATING != 0 AND r2.RATING != 0) SELECT user2 as SIMILAR_USERS, ROUND ( (COUNT(*) * SUM(rating1 * rating2) - SUM(rating1) * SUM(rating2)) / (SQRT(COUNT(*) * SUM(rating1 * rating1) - SUM(rating1) * SUM(rating1)) * SQRT(COUNT(*) * SUM(rating2 * rating2) - SUM(rating2) * SUM(rating2))), 3) AS PEARSON FROM COMMON_RATINGS GROUP BY user2 HAVING COUNT(*) > 5 ORDER BY PEARSON DESC FETCH FIRST 10 ROWS ONLY
getContentBasedRecs = WITH LIKED_PRODUCTS AS (SELECT * FROM CCJ_PRODUCTS WHERE PRODUCTID IN (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING > ?)), UNRATED_PRODUCTS AS (SELECT * FROM CCJ_PRODUCTS WHERE PRODUCTID IN (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING = 0)) SELECT DISTINCT unrated.PRODUCTNAME, liked.PRODUCTNAME FROM UNRATED_PRODUCTS unrated, LIKED_PRODUCTS liked WHERE (((unrated.CREATOR = liked.CREATOR AND unrated.GENRE = liked.GENRE) OR (unrated.CREATOR = liked.CREATOR AND UTL_MATCH.JARO_WINKLER_SIMILARITY(unrated.TAGS, liked.TAGS) > 40) OR (REGEXP_INSTR(unrated.PRODUCTNAME, liked.PRODUCTNAME) > 0)) AND unrated.PRODUCTTYPE = 'videogame') OR (((unrated.CREATOR = liked.CREATOR) OR (unrated.GENRE = liked.GENRE AND unrated.RELEASEDATE BETWEEN ADD_MONTHS(liked.RELEASEDATE, -24) AND ADD_MONTHS(liked.RELEASEDATE, 24))) AND unrated.PRODUCTTYPE = 'music') OR (unrated.GENRE = liked.GENRE AND UTL_MATCH.JARO_WINKLER_SIMILARITY(unrated.TAGS, liked.TAGS) > 50) OR UTL_MATCH.JARO_WINKLER_SIMILARITY(unrated.TAGS, liked.TAGS) > 80 ORDER BY unrated.PRODUCTNAME

getLikedProducts = WITH LIKED_PRODUCTS AS (SELECT * FROM CCJ_PRODUCTS WHERE PRODUCTID IN (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING > ?)) SELECT * FROM LIKED_PRODUCTS;
getUnratedProducts = WITH UNRATED_PRODUCTS AS (SELECT * FROM CCJ_PRODUCTS WHERE PRODUCTID IN (SELECT PRODUCTID FROM CCJ_RATING_GENERAL WHERE USERID = ? AND RATING = 0)) SELECT * FROM UNRATED_PRODUCTS;
